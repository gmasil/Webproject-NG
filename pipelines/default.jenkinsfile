pipeline {
  agent {
    docker {
      image "registry.gmasil.de/docker/maven-build-container"
      args "-v /maven:/maven -v /root/.docker/config.json:/root/.docker/config.json -e JAVA_TOOL_OPTIONS='-Duser.home=/maven' --network servicenet_default -v /usr/bin/docker:/usr/bin/docker"
    }
  }
  environment {
    MAVEN_ARTIFACT = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.groupId}:\${project.artifactId}' --non-recursive exec:exec", returnStdout: true).trim()
    MAVEN_PROJECT_NAME = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.name}' --non-recursive exec:exec", returnStdout: true).trim()
    MAVEN_PROJECT_VERSION = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.version}' --non-recursive exec:exec", returnStdout: true).trim()
    GIT_COMMIT_SHORT = sh(script: "git rev-parse --short ${GIT_COMMIT}", returnStdout: true).trim()
    NETWORK_NAME = "servicenet_default"
    SUT_NAME_NATIVE = "wng-sut-native"
    SUT_NAME_JIB = "wng-sut-jib"
    SUT_IMAGE_NAME = "registry.gmasil.de/docker/webproject-ng"
    SUT_IMAGE_TAG_NATIVE = "${GIT_COMMIT_SHORT}-native"
    SUT_IMAGE_TAG_JIB = "${GIT_COMMIT_SHORT}"
  }
  stages {
    stage("Build") {
      steps {
        sh "mvn clean package --no-transfer-progress -P jib -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG_JIB}"
      }
      post {
        always {
          junit testResults: '**/surefire-reports/**/*.xml', allowEmptyResults: true
          archiveArtifacts artifacts: '**/gherkin/gherkin-report.html', fingerprint: true, allowEmptyArchive: true
        }
      }
    }
    stage("Analyze") {
      environment {
        SONAR_TOKEN = credentials("SONAR_TOKEN")
      }
      steps {
        script {
          def safeBranch = env.GIT_BRANCH.replaceAll("[^a-zA-Z0-9_:{\\.-]+", "")
          sh "mvn -f webproject-backend  sonar:sonar --no-transfer-progress -Dsonar.host.url=https://sonar.gmasil.de -Dsonar.login=${env.SONAR_TOKEN} -Dsonar.projectKey=${env.MAVEN_ARTIFACT}:backend:${safeBranch} \"-Dsonar.projectName=${env.MAVEN_PROJECT_NAME} Backend (${env.GIT_BRANCH})\""
          sh "mvn -f webproject-frontend sonar:sonar --no-transfer-progress -Dsonar.host.url=https://sonar.gmasil.de -Dsonar.login=${env.SONAR_TOKEN} -Dsonar.projectKey=${env.MAVEN_ARTIFACT}:frontend:${safeBranch} \"-Dsonar.projectName=${env.MAVEN_PROJECT_NAME} Frontend (${env.GIT_BRANCH})\""
        }
      }
    }
    stage("Build Native") {
      steps {
        sh "mvn -f webproject-backend clean package --no-transfer-progress -P native -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG_NATIVE}"
      }
    }
    stage("Integration Test") {
      parallel {
        stage("Native") {
          environment {
            SUT_NAME = "${SUT_NAME_NATIVE}"
            SUT_TAG = "${SUT_IMAGE_TAG_NATIVE}"
          }
          stages {
            stage("Start") {
              steps {
                script {
                  sh("docker stop ${SUT_NAME} && docker rm ${SUT_NAME} || true")
                  sh("docker run --rm -d --network ${NETWORK_NAME} --name ${SUT_NAME} registry.gmasil.de/docker/webproject-ng:${SUT_TAG}")
                  sh("ENDPOINT=${SUT_NAME}:6900/health INTERVAL=1 VERBOSE=true wait-for-service.sh")
                }
              }
            }
            stage("Test") {
              steps {
                script {
                  env.TEST_STATUS_NATIVE = "FAILED";
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  script {
                    sh("curl -s ${SUT_NAME}:6900/health | jq -r '.status' | grep UP")
                    env.TEST_STATUS_NATIVE = "OK";
                  }
                }
              }
            }
            stage("Stop") {
              steps {
                script {
                  sh("docker stop ${SUT_NAME} && docker rm ${SUT_NAME} || true")
                }
              }
            }
          }
        }
        stage("Jib") {
          environment {
            SUT_NAME = "${SUT_NAME_JIB}"
            SUT_TAG = "${SUT_IMAGE_TAG_JIB}"
          }
          stages {
            stage("Start") {
              steps {
                script {
                  sh("docker stop ${SUT_NAME} && docker rm ${SUT_NAME} || true")
                  sh("docker run --rm -d --network ${NETWORK_NAME} --name ${SUT_NAME} registry.gmasil.de/docker/webproject-ng:${SUT_TAG}")
                  sh("ENDPOINT=${SUT_NAME}:6900/health INTERVAL=1 VERBOSE=true wait-for-service.sh")
                }
              }
            }
            stage("Test") {
              steps {
                script {
                  env.TEST_STATUS_JIB = "FAILED";
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  script {
                    sh("curl -s ${SUT_NAME}:6900/health | jq -r '.status' | grep UP")
                    env.TEST_STATUS_JIB = "OK";
                  }
                }
              }
            }
            stage("Stop") {
              steps {
                script {
                  sh("docker stop ${SUT_NAME} && docker rm ${SUT_NAME} || true")
                }
              }
            }
          }
        }
      }
    }
    stage("Cleanup") {
      steps {
        script {
          sh("docker image rm ${SUT_IMAGE_NAME}:${SUT_IMAGE_TAG_JIB}")
          sh("docker image rm ${SUT_IMAGE_NAME}:${SUT_IMAGE_TAG_NATIVE}")
          if(env.TEST_STATUS_NATIVE == "FAILED" || env.TEST_STATUS_JIB == "FAILED") {
            currentBuild.result = 'FAILURE'
          }  
        }
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/selenium-screenshots/*.png', fingerprint: true, allowEmptyArchive: true
    }
  }
}
