pipeline {
  agent {
    docker {
      image "registry.gmasil.de/docker/maven-build-container"
      args "-v /maven:/maven -v /root/.docker/config.json:/root/.docker/config.json -e JAVA_TOOL_OPTIONS='-Duser.home=/maven' --network servicenet_default -v /usr/bin/docker:/usr/bin/docker"
    }
  }
  environment {
    MAIN_WORKSPACE = ""
    MAVEN_ARTIFACT = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.groupId}:\${project.artifactId}' --non-recursive exec:exec", returnStdout: true).trim()
    MAVEN_PROJECT_NAME = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.name}' --non-recursive exec:exec", returnStdout: true).trim()
    MAVEN_PROJECT_VERSION = sh(script: "mvn -q -Dexec.executable=echo -Dexec.args='\${project.version}' --non-recursive exec:exec", returnStdout: true).trim()
    GIT_COMMIT_SHORT = sh(script: "git rev-parse --short ${GIT_COMMIT}", returnStdout: true).trim()
    NETWORK_NAME = "servicenet_default"
    SUT_IMAGE_NAME = "registry.gmasil.de/docker/webproject-ng"
    SUT_IMAGE_TAG_NATIVE = "${GIT_COMMIT_SHORT}-native"
    SUT_IMAGE_TAG_JIB = "${GIT_COMMIT_SHORT}"
  }
  stages {
    stage("Frontend") {
      steps {
        script {
          MAIN_WORKSPACE = WORKSPACE
          dir("webproject-frontend") {
            sh("npm install")
            sh("npm run build")
            sh("npm run sonar")
          }
        }
      }
    }
    stage("Backend") {
      parallel {
        stage("Jib") {
          stages {
            stage("Build") {
              steps {
                script {
                  sh("mvn -f webproject-backend clean package --no-transfer-progress -P jib -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG_JIB}")
                }
              }
              post {
                always {
                  junit testResults: '**/surefire-reports/**/*.xml', allowEmptyResults: true
                  archiveArtifacts artifacts: '**/gherkin/gherkin-report.html', fingerprint: true, allowEmptyArchive: true
                }
              }
            }
            stage("Analyze") {
              environment {
                SONAR_TOKEN = credentials("SONAR_TOKEN")
              }
              steps {
                script {
                  def safeBranch = env.GIT_BRANCH.replaceAll("[^a-zA-Z0-9_:{\\.-]+", "")
                  sh("mvn -f webproject-backend  sonar:sonar --no-transfer-progress -Dsonar.host.url=https://sonar.gmasil.de -Dsonar.login=${env.SONAR_TOKEN} -Dsonar.projectKey=${env.MAVEN_ARTIFACT}:backend:${safeBranch} \"-Dsonar.projectName=${env.MAVEN_PROJECT_NAME} Backend (${env.GIT_BRANCH})\"")
                  sh("mvn -f webproject-frontend sonar:sonar --no-transfer-progress -Dsonar.host.url=https://sonar.gmasil.de -Dsonar.login=${env.SONAR_TOKEN} -Dsonar.projectKey=${env.MAVEN_ARTIFACT}:frontend:${safeBranch} \"-Dsonar.projectName=${env.MAVEN_PROJECT_NAME} Frontend (${env.GIT_BRANCH})\"")
                }
              }
            }
            stage("Integration Test") {
              environment {
                MODUS = "jib"
                SUT_IMAGE_TAG = "${SUT_IMAGE_TAG_JIB}"
                IMPORT_FILE = "${WORKSPACE}/webproject-tests/src/test/resources/test-data.yml"
              }
              steps {
                script {
                  def FROM_IMAGE = sh(script: "cat /etc/hostname", returnStdout: true).trim()
                  sh("xvfb-run mvn -f webproject-tests clean verify --no-transfer-progress -P ci -Ddocker.showLogs -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG} -Dsut.volume.from=${FROM_IMAGE} -Dsut.importfile=${IMPORT_FILE} -Dsut.network=${NETWORK_NAME} -Dsut.name=${SUT_IMAGE_TAG} -Dcontainer.name=${SUT_IMAGE_TAG} -Dwebdriver.screenshot.folder=target/selenium-screenshots/${MODUS}")
                }
              }
              post {
                always {
                  archiveArtifacts artifacts: '**/selenium-screenshots/**/*.png', fingerprint: true, allowEmptyArchive: true
                }
              }
            }
          }
        }
        stage("Native") {
          agent {
            docker {
              image "registry.gmasil.de/docker/maven-build-container"
              args "-v /maven:/maven -v /root/.docker/config.json:/root/.docker/config.json -e JAVA_TOOL_OPTIONS='-Duser.home=/maven' --network servicenet_default -v /usr/bin/docker:/usr/bin/docker"
            }
          }
          stages {
            stage("Copy Frontend") {
              steps {
                script {
                  sh("cp -r ${MAIN_WORKSPACE}/webproject-frontend/dist/ webproject-frontend/")
                }
              }
            }
            stage("Build") {
              steps {
                script {
                  sh("mvn -f webproject-backend clean package --no-transfer-progress -P native -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG_NATIVE}")
                }
              }
            }
            stage("Integration Test") {
              environment {
                MODUS = "native"
                SUT_IMAGE_TAG = "${SUT_IMAGE_TAG_NATIVE}"
                IMPORT_FILE = "${WORKSPACE}/webproject-tests/src/test/resources/test-data.yml"
              }
              steps {
                script {
                  def FROM_IMAGE = sh(script: "cat /etc/hostname", returnStdout: true).trim()
                  sh("xvfb-run mvn -f webproject-tests clean verify --no-transfer-progress -P ci -Ddocker.showLogs -Dtarget.image=${SUT_IMAGE_NAME} -Dtarget.tag=${SUT_IMAGE_TAG} -Dsut.volume.from=${FROM_IMAGE} -Dsut.importfile=${IMPORT_FILE} -Dsut.network=${NETWORK_NAME} -Dsut.name=${SUT_IMAGE_TAG} -Dcontainer.name=${SUT_IMAGE_TAG} -Dwebdriver.screenshot.folder=target/selenium-screenshots/${MODUS}")
                }
              }
              post {
                always {
                  archiveArtifacts artifacts: '**/selenium-screenshots/**/*.png', fingerprint: true, allowEmptyArchive: true
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      script {
        sh("docker image rm ${SUT_IMAGE_NAME}:${SUT_IMAGE_TAG_JIB} || true")
        sh("docker image rm ${SUT_IMAGE_NAME}:${SUT_IMAGE_TAG_NATIVE} || true")
      }
    }
  }
}
